{"version":3,"file":"static/js/486.6e027a6e.chunk.js","mappings":"sSAEaA,E,QAAOC,GAAAA,GAAH,uH,SC0DjB,EApDiB,WACb,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAS,mCAAG,sGAEVN,GAAW,GAFD,UAGYO,EAAAA,EAAAA,IAAaJ,GAHzB,OAKa,KAFjBK,EAHI,QAKEC,QACRC,EAAAA,GAAAA,KAAW,0BAGfZ,EAAUU,GATA,gDAUHG,EAVG,KAUHA,SACPT,EAASS,EAASC,KAAKC,SACvBH,EAAAA,GAAAA,MAAA,gBAAqBC,EAASC,KAAKC,UAZzB,yBAcVb,GAAW,GAdD,4EAAH,qDAkBfM,GACH,GAAE,CAACH,IAEJ,IAAMW,EAAUjB,EAAOkB,KAAI,gBAAGC,EAAH,EAAGA,cAAeC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,GAAhC,OACvB,2BACI,gBAAKC,IAAG,0CAAqCF,GAAgBG,IAAKJ,EAC9DjB,QAAQ,OACRsB,MAAM,QACNC,OAAO,WAEX,wBAAKN,MANAE,EADc,IAW3B,OACI,gCACKnB,IAAW,SAACwB,EAAA,EAAD,IACXtB,IAAS,SAAC,KAAD,CAAgBuB,MAAM,YAC/B3B,IACG,0BACI,SAACH,EAAD,UAAOoB,QAK1B,C,yLCvDKW,E,QAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAW,mCAAG,2GAAOC,EAAP,+BAAc,EAAd,SACFN,EAASO,IAAI,uBAAwB,CAC1DJ,OAAQ,CACNG,KAAAA,KAHqB,uBACjBnB,EADiB,EACjBA,KADiB,kBAMlBA,EAAKJ,SANa,2CAAH,qDASXyB,EAAe,mCAAG,WAAMC,GAAN,yFACNT,EAASO,IAAT,iBAAuBE,EAAvB,MADM,uBACrBtB,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAH,sDAKfuB,EAAW,mCAAG,WAAMC,GAAN,yFACFX,EAASO,IAAI,iBAAkB,CACpDJ,OAAQ,CACNQ,MAAAA,KAHqB,uBACjBxB,EADiB,EACjBA,KADiB,kBAMlBA,EAAKJ,SANa,2CAAH,sDASXD,EAAY,mCAAG,WAAM2B,GAAN,yFACHT,EAASO,IAAT,iBAAuBE,EAAvB,cADG,uBAClBtB,EADkB,EAClBA,KADkB,kBAEnBA,EAAKyB,MAFc,2CAAH,sDAKZC,EAAU,mCAAG,WAAMJ,GAAN,yFACDT,EAASO,IAAT,iBAAuBE,EAAvB,eADC,uBAChBtB,EADgB,EAChBA,KADgB,kBAEjBA,EAAKJ,SAFY,2CAAH,qD","sources":["components/pages/CastPage/CastPage.styled.jsx","components/pages/CastPage/CastPage.jsx","components/shared/services/api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const List = styled.ul`\n  list-style: none;\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  gap: 30px;\n`;","import { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCast } from 'components/shared/services/api';\nimport Loader from 'components/shared/loader/Loader';\nimport { List } from './CastPage.styled';\n\nconst CastPage = () => {\n    const [movies, setMovies] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        const fetchCast = async () => {\n            try {\n                setLoading(true);\n                const results = await getMovieCast(movieId);\n\n                if (results.length === 0) {\n                    toast.info('Sorry, casts not found');\n                }\n\n                setMovies(results);\n            } catch ({ response }) {\n                setError(response.data.message);\n                toast.error(`Sorry,${response.data.message}`);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchCast();\n    }, [movieId]);\n\n    const element = movies.map(({ original_name, profile_path, id }) => (\n        <li key={id}>\n            <img src={`https://image.tmdb.org/t/p/w300/${profile_path}`} alt={original_name}\n                loading='lazy'\n                width='100px'\n                height='150px'\n            />\n            <h3>{original_name}</h3>\n        </li>\n    ));\n\n    return (\n        <>\n            {loading && <Loader />} \n            {error && <ToastContainer theme=\"colored\" />}\n            {movies && (\n                <div>\n                    <List>{element}</List>\n                </div>\n            )}\n        </>\n    )\n};\n\nexport default CastPage;","// e6335e45e66a73839ab061046ca7a249\nimport axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'e6335e45e66a73839ab061046ca7a249',\n  },\n});\n\nexport const filmsSearch = async (page = 1) => {\n  const { data } = await instance.get('/trending/movie/day?', {\n    params: {\n      page,\n    },\n  });\n  return data.results;\n};\n\nexport const getMovieDetails = async movie_id => {\n  const { data } = await instance.get(`/movie/${movie_id}?`);\n  return data;\n};\n\nexport const MovieSearch = async query => {\n  const { data } = await instance.get('/search/movie?', {\n    params: {\n      query,\n    },\n  });\n  return data.results;\n};\n\nexport const getMovieCast = async movie_id => {\n  const { data } = await instance.get(`/movie/${movie_id}/credits?`);\n  return data.cast;\n};\n\nexport const getReviews = async movie_id => {\n  const { data } = await instance.get(`/movie/${movie_id}//reviews?`);\n  return data.results;\n};\n\n\n"],"names":["List","styled","useState","movies","setMovies","loading","setLoading","error","setError","movieId","useParams","useEffect","fetchCast","getMovieCast","results","length","toast","response","data","message","element","map","original_name","profile_path","id","src","alt","width","height","Loader","theme","instance","axios","baseURL","params","api_key","filmsSearch","page","get","getMovieDetails","movie_id","MovieSearch","query","cast","getReviews"],"sourceRoot":""}